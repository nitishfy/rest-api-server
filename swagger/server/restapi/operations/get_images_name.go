// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetImagesNameHandlerFunc turns a function with the right signature into a get images name handler
type GetImagesNameHandlerFunc func(GetImagesNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetImagesNameHandlerFunc) Handle(params GetImagesNameParams) middleware.Responder {
	return fn(params)
}

// GetImagesNameHandler interface for that can handle valid get images name params
type GetImagesNameHandler interface {
	Handle(GetImagesNameParams) middleware.Responder
}

// NewGetImagesName creates a new http.Handler for the get images name operation
func NewGetImagesName(ctx *middleware.Context, handler GetImagesNameHandler) *GetImagesName {
	return &GetImagesName{Context: ctx, Handler: handler}
}

/*
	GetImagesName swagger:route GET /images/{name} getImagesName

Returns the Gopher image
*/
type GetImagesName struct {
	Context *middleware.Context
	Handler GetImagesNameHandler
}

func (o *GetImagesName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetImagesNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
